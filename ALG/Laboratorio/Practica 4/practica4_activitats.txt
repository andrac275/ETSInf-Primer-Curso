 ans  =

   1.


--> //Activitat 1

--> //Mirar en la llibreta pag3 darrere esta la matriu

--> //Matriu G amb la primera columna a 1/8 per evitar que siga un pou i aixi que siga estocastica


--> G=[1/8 0 0 0 0 0 1/3 0;1/8 0 1/2 1/3 0 0 0 0;1/8 0 0 0 0 0 0 0;1/8 1 0 0 0 0 0 0;1/8 0 1/2 1/3 0 0 1/3 0;1/8 0 0 1/3 1/3 0 0 1/2;1/8 0 0 0 1/3 0 0 1/2;1/8 0 0 0 1/3 1 1/3 0]
 G  = 

   0.125   0.   0.    0.          0.          0.   0.3333333   0. 
   0.125   0.   0.5   0.3333333   0.          0.   0.          0. 
   0.125   0.   0.    0.          0.          0.   0.          0. 
   0.125   1.   0.    0.          0.          0.   0.          0. 
   0.125   0.   0.5   0.3333333   0.          0.   0.3333333   0. 
   0.125   0.   0.    0.3333333   0.3333333   0.   0.          0.5
   0.125   0.   0.    0.          0.3333333   0.   0.          0.5
   0.125   0.   0.    0.          0.3333333   1.   0.3333333   0. 


--> //Ara la matriu GG que es el resultat de Alfa*G+(1-Alfa)*E

--> GG=[0.85*G+(1-0.85)*(1/8)*ones(8,8)]
 GG  = 


         column 1 to 6

   0.125   0.01875   0.01875   0.01875     0.01875     0.01875
   0.125   0.01875   0.44375   0.3020833   0.01875     0.01875
   0.125   0.01875   0.01875   0.01875     0.01875     0.01875
   0.125   0.86875   0.01875   0.01875     0.01875     0.01875
   0.125   0.01875   0.44375   0.3020833   0.01875     0.01875
   0.125   0.01875   0.01875   0.3020833   0.3020833   0.01875
   0.125   0.01875   0.01875   0.01875     0.3020833   0.01875
   0.125   0.01875   0.01875   0.01875     0.3020833   0.86875

         column 7 to 8

   0.3020833   0.01875
   0.01875     0.01875
   0.01875     0.01875
   0.01875     0.01875
   0.3020833   0.01875
   0.01875     0.44375
   0.01875     0.44375
   0.3020833   0.01875


--> //Ara cal resoldre el progrema GG*I=I (com la practica 3)

--> //Se pot fer amb el kernel o amb Markov

--> //Kernel

--> k=kernel(GG-eye(GG))
 k  = 

   0.1834258
   0.1450344
   0.0644519
   0.1877311
   0.2640083
   0.4730985
   0.419908
   0.6603618


--> K=k/sum(k)
 K  = 

   0.0764905
   0.0604809
   0.0268771
   0.0782859
   0.1100943
   0.1972871
   0.1751061
   0.275378


--> // La pagina 8 te una probabilitat del 27,5378%. Es la mes visitada.

--> //Es la mes important

--> [a,b]=gsort(K)
 b  = 

   8.
   6.
   7.
   5.
   4.
   1.
   2.
   3.

 a  = 

   0.275378
   0.1972871
   0.1751061
   0.1100943
   0.0782859
   0.0764905
   0.0604809
   0.0268771


--> //ens dona la pagina en el b i la seva importancia en la a. El gsort es per a ordenar

--> //---------------------------------------------------

--> //El mateix amb les cadenes de Markov

--> //Amb les cadenes de markov es com se faria en el mon real

--> x0=[0;0;0;0;0;0;0;1]
 x0  = 

   0.
   0.
   0.
   0.
   0.
   0.
   0.
   1.


--> for i=1:10
  > x0=GG*x0;
  > end

--> x0
 x0  = 

   0.0806435
   0.060447
   0.0262672
   0.0777217
   0.1148233
   0.1853943
   0.1630007
   0.2917023


--> K
 K  = 

   0.0764905
   0.0604809
   0.0268771
   0.0782859
   0.1100943
   0.1972871
   0.1751061
   0.275378


--> //Mes o menys se veu que aproxima. Si fera mes iteracion en el bucle, aproximaria millor a la K.

--> //----------------------------------------------------

--> //

--> //

--> //Activitat 2

--> //Fitxer Pagerank de poliformat

--> function A=randomat(n)
  >   g=grand(n,n,'def');
  >   A=ones(n,n);
  >   c=ones(n,1);
  >   for j=1:n,
  >     x=0;
  >     for i=1:n,
  >       if i==j then A(i,i)=0; 
  >       else
  >         if i==3 then A(i,j)=1; x=x+1;
  >           else
  >              if g(i,j)<=4/5 then A(i,j)=0; 
  >                else
  >                  A(i,j)=1; x=x+1;
  >                end;
  >           end;
  >        end;
  >    end;
  >    c(j)=x;
  >  end;
  >  for i=2:n,
  >    A(i,1)=0;
  >  end;
  >  A(3,1)=1
  >  c(1)=1;
  >  for j=1:n,
  >    for i=1:n,
  >      if c(j)<>0 then A(i,j)=A(i,j)/c(j); end;
  >    end;
  >  end;
  > endfunction

--> //Ja esta executat

--> G=randomat(10)
 G  = 


         column 1 to 7

   0.   0.          0.          0.     0.    0.   0.       
   0.   0.          0.          0.     0.    0.   0.       
   1.   0.1666667   0.          0.25   0.5   1.   0.3333333
   0.   0.          0.3333333   0.     0.    0.   0.       
   0.   0.          0.3333333   0.25   0.    0.   0.       
   0.   0.1666667   0.          0.     0.    0.   0.3333333
   0.   0.1666667   0.          0.     0.5   0.   0.       
   0.   0.1666667   0.          0.25   0.    0.   0.       
   0.   0.1666667   0.3333333   0.25   0.    0.   0.       
   0.   0.1666667   0.          0.     0.    0.   0.3333333

         column 8 to 10

   0.25   0.   0. 
   0.25   0.   0. 
   0.25   1.   0.5
   0.     0.   0. 
   0.     0.   0. 
   0.     0.   0. 
   0.25   0.   0. 
   0.     0.   0.5
   0.     0.   0. 
   0.     0.   0. 


--> GG=[0.85*G+(1-0.85)*(1/10)*ones(10,10)]
 GG  = 


         column 1 to 7

   0.015   0.015       0.015       0.015    0.015   0.015   0.015    
   0.015   0.015       0.015       0.015    0.015   0.015   0.015    
   0.865   0.1566667   0.015       0.2275   0.44    0.865   0.2983333
   0.015   0.015       0.2983333   0.015    0.015   0.015   0.015    
   0.015   0.015       0.2983333   0.2275   0.015   0.015   0.015    
   0.015   0.1566667   0.015       0.015    0.015   0.015   0.2983333
   0.015   0.1566667   0.015       0.015    0.44    0.015   0.015    
   0.015   0.1566667   0.015       0.2275   0.015   0.015   0.015    
   0.015   0.1566667   0.2983333   0.2275   0.015   0.015   0.015    
   0.015   0.1566667   0.015       0.015    0.015   0.015   0.2983333

         column 8 to 10

   0.2275   0.015   0.015
   0.2275   0.015   0.015
   0.2275   0.865   0.44 
   0.015    0.015   0.015
   0.015    0.015   0.015
   0.015    0.015   0.015
   0.2275   0.015   0.015
   0.015    0.015   0.44 
   0.015    0.015   0.015
   0.015    0.015   0.015


--> k=kernel(GG-eye(GG))
 k  = 

  -0.0668551
  -0.0668551
  -0.7933886
  -0.2607329
  -0.3161386
  -0.1051047
  -0.2106852
  -0.1454858
  -0.3256097
  -0.1051047


--> K=k/sum(k)
 K  = 

   0.0279033
   0.0279033
   0.331136
   0.1088219
   0.1319465
   0.0438675
   0.0879335
   0.0607213
   0.1358995
   0.0438675


--> [a,b]=gsort(K)
 b  = 

   3.
   9.
   5.
   4.
   7.
   8.
   6.
   10.
   2.
   1.

 a  = 

   0.331136
   0.1358995
   0.1319465
   0.1088219
   0.0879335
   0.0607213
   0.0438675
   0.0438675
   0.0279033
   0.0279033


--> //La 3 seria la mes important

--> //

--> //

--> //

--> //Activitat 3

--> G=randomat(100);

--> //Ja esta introduida la matriu 100x100 estocastica.  
  

--> GG=[0.85*G+(1-0.85)*(1/100)*ones(100,100)];

--> k=kernel(GG-eye(GG));

--> K=k/sum(k);

--> [a,b]=gsort(K);
 
--> //La seguent intruccio mostra nomes les 5 primeres files del gsort.

--> [b(1:5) a(1:5)]
 ans  =

   3.     0.050253 
   5.     0.0162081
   100.   0.014492 
   15.    0.0142812
   68.    0.0132946


--> //Tant en la act2 com en la act3, el codi que utilitzem del fitxer fa que la 3 siga sempre la mes important. Esta fet aixi el codi.

--> //Pero lo bo de gastar eixe codi es que tenim la matriu preparada perque es estocastica.

--> diary(0)
